openapi: 3.0.3
info:
  title: pansync
  version: 1.0.0
  description: Sync configuration data between Panorama and Prisma Access
paths:
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
        - in: query
          name: format
          schema:
            type: string
            enum:
              - json
              - yaml
        - in: query
          name: lang
          schema:
            type: string
            enum:
              - af
              - ar
              - ar-dz
              - ast
              - az
              - be
              - bg
              - bn
              - br
              - bs
              - ca
              - cs
              - cy
              - da
              - de
              - dsb
              - el
              - en
              - en-au
              - en-gb
              - eo
              - es
              - es-ar
              - es-co
              - es-mx
              - es-ni
              - es-ve
              - et
              - eu
              - fa
              - fi
              - fr
              - fy
              - ga
              - gd
              - gl
              - he
              - hi
              - hr
              - hsb
              - hu
              - hy
              - ia
              - id
              - ig
              - io
              - is
              - it
              - ja
              - ka
              - kab
              - kk
              - km
              - kn
              - ko
              - ky
              - lb
              - lt
              - lv
              - mk
              - ml
              - mn
              - mr
              - ms
              - my
              - nb
              - ne
              - nl
              - nn
              - os
              - pa
              - pl
              - pt
              - pt-br
              - ro
              - ru
              - sk
              - sl
              - sq
              - sr
              - sr-latn
              - sv
              - sw
              - ta
              - te
              - tg
              - th
              - tk
              - tr
              - tt
              - udm
              - uk
              - ur
              - uz
              - vi
              - zh-hans
              - zh-hant
      tags:
        - schema
      security:
        - cookieAuth: []
        - tokenAuth: []
        - {}
      responses:
        "200":
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ""
  /api/v1/dj-rest-auth/login/:
    post:
      operationId: v1_dj_rest_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Login"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Login"
        required: true
      security:
        - cookieAuth: []
        - tokenAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
          description: ""
  /api/v1/dj-rest-auth/logout/:
    post:
      operationId: v1_dj_rest_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
        - v1
      security:
        - cookieAuth: []
        - tokenAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/v1/dj-rest-auth/password/change/:
    post:
      operationId: v1_dj_rest_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordChange"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordChange"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordChange"
        required: true
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/v1/dj-rest-auth/password/reset/:
    post:
      operationId: v1_dj_rest_auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordReset"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordReset"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordReset"
        required: true
      security:
        - cookieAuth: []
        - tokenAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/v1/dj-rest-auth/password/reset/confirm/:
    post:
      operationId: v1_dj_rest_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
        required: true
      security:
        - cookieAuth: []
        - tokenAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/v1/dj-rest-auth/registration/:
    post:
      operationId: v1_dj_rest_auth_registration_create
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Register"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Register"
        required: true
      security:
        - cookieAuth: []
        - tokenAuth: []
        - {}
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
          description: ""
  /api/v1/dj-rest-auth/registration/resend-email/:
    post:
      operationId: v1_dj_rest_auth_registration_resend_email_create
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResendEmailVerification"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ResendEmailVerification"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ResendEmailVerification"
      security:
        - cookieAuth: []
        - tokenAuth: []
        - {}
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/v1/dj-rest-auth/registration/verify-email/:
    post:
      operationId: v1_dj_rest_auth_registration_verify_email_create
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyEmail"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/VerifyEmail"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/VerifyEmail"
        required: true
      security:
        - cookieAuth: []
        - tokenAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/v1/dj-rest-auth/user/:
    get:
      operationId: v1_dj_rest_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
        - v1
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
    put:
      operationId: v1_dj_rest_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDetails"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserDetails"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserDetails"
        required: true
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
    patch:
      operationId: v1_dj_rest_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedUserDetails"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedUserDetails"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedUserDetails"
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
  /api/v1/jobs/:
    get:
      operationId: v1_jobs_list
      tags:
        - v1
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Jobs"
          description: ""
    post:
      operationId: v1_jobs_create
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Jobs"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Jobs"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Jobs"
        required: true
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Jobs"
          description: ""
  /api/v1/jobs/{id}/:
    get:
      operationId: v1_jobs_retrieve
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this jobs.
          required: true
      tags:
        - v1
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Jobs"
          description: ""
    put:
      operationId: v1_jobs_update
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this jobs.
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Jobs"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Jobs"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Jobs"
        required: true
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Jobs"
          description: ""
    patch:
      operationId: v1_jobs_partial_update
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this jobs.
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedJobs"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedJobs"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedJobs"
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Jobs"
          description: ""
    delete:
      operationId: v1_jobs_destroy
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this jobs.
          required: true
      tags:
        - v1
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "204":
          description: No response body
  /api/v1/panorama/:
    get:
      operationId: v1_panorama_list
      tags:
        - v1
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Panorama"
          description: ""
    post:
      operationId: v1_panorama_create
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Panorama"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Panorama"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Panorama"
        required: true
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Panorama"
          description: ""
  /api/v1/panorama/{id}/:
    get:
      operationId: v1_panorama_retrieve
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this panorama.
          required: true
      tags:
        - v1
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Panorama"
          description: ""
    put:
      operationId: v1_panorama_update
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this panorama.
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Panorama"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Panorama"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Panorama"
        required: true
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Panorama"
          description: ""
    patch:
      operationId: v1_panorama_partial_update
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this panorama.
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedPanorama"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedPanorama"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedPanorama"
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Panorama"
          description: ""
    delete:
      operationId: v1_panorama_destroy
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this panorama.
          required: true
      tags:
        - v1
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "204":
          description: No response body
  /api/v1/prisma/:
    get:
      operationId: v1_prisma_list
      tags:
        - v1
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Prisma"
          description: ""
    post:
      operationId: v1_prisma_create
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Prisma"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Prisma"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Prisma"
        required: true
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Prisma"
          description: ""
  /api/v1/prisma/{id}/:
    get:
      operationId: v1_prisma_retrieve
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this prisma.
          required: true
      tags:
        - v1
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Prisma"
          description: ""
    put:
      operationId: v1_prisma_update
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this prisma.
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Prisma"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Prisma"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Prisma"
        required: true
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Prisma"
          description: ""
    patch:
      operationId: v1_prisma_partial_update
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this prisma.
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedPrisma"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedPrisma"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedPrisma"
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Prisma"
          description: ""
    delete:
      operationId: v1_prisma_destroy
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this prisma.
          required: true
      tags:
        - v1
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "204":
          description: No response body
  /api/v1/users/:
    get:
      operationId: v1_users_list
      tags:
        - v1
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
          description: ""
    post:
      operationId: v1_users_create
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: ""
  /api/v1/users/{id}/:
    get:
      operationId: v1_users_retrieve
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this user.
          required: true
      tags:
        - v1
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: ""
    put:
      operationId: v1_users_update
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this user.
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: ""
    patch:
      operationId: v1_users_partial_update
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this user.
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedUser"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedUser"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedUser"
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: ""
    delete:
      operationId: v1_users_destroy
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this user.
          required: true
      tags:
        - v1
      security:
        - cookieAuth: []
        - tokenAuth: []
      responses:
        "204":
          description: No response body
components:
  schemas:
    Jobs:
      type: object
      properties:
        name:
          type: string
          maxLength: 1024
        description:
          type: string
        result:
          type: string
        author:
          type: integer
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - author
        - created_at
        - name
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - password
    Panorama:
      type: object
      properties:
        hostname:
          type: string
          maxLength: 100
        ipv4_address:
          type: string
        ipv6_address:
          type: string
        api_token:
          type: string
          maxLength: 100
        author:
          type: integer
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - api_token
        - author
        - created_at
        - hostname
        - ipv4_address
        - ipv6_address
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
        - new_password1
        - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
        - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
        - new_password1
        - new_password2
        - token
        - uid
    PatchedJobs:
      type: object
      properties:
        name:
          type: string
          maxLength: 1024
        description:
          type: string
        result:
          type: string
        author:
          type: integer
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedPanorama:
      type: object
      properties:
        hostname:
          type: string
          maxLength: 100
        ipv4_address:
          type: string
        ipv6_address:
          type: string
        api_token:
          type: string
          maxLength: 100
        author:
          type: integer
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedPrisma:
      type: object
      properties:
        tenant_name:
          type: string
          maxLength: 100
        client_id:
          type: string
          maxLength: 100
        client_secret:
          type: string
          maxLength: 100
        tsg_id:
          type: string
          maxLength: 100
        author:
          type: integer
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        is_staff:
          type: boolean
          readOnly: true
          title: Staff status
          description: Designates whether the user can log into this admin site.
        is_superuser:
          type: boolean
          readOnly: true
          title: Superuser status
          description:
            Designates that this user has all permissions without explicitly
            assigning them.
    PatchedUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    Prisma:
      type: object
      properties:
        tenant_name:
          type: string
          maxLength: 100
        client_id:
          type: string
          maxLength: 100
        client_secret:
          type: string
          maxLength: 100
        tsg_id:
          type: string
          maxLength: 100
        author:
          type: integer
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - author
        - client_id
        - client_secret
        - created_at
        - tenant_name
        - tsg_id
    Register:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
        - password1
        - password2
        - username
    ResendEmailVerification:
      type: object
      properties:
        email:
          type: string
          format: email
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
        - detail
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
        - key
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        is_staff:
          type: boolean
          readOnly: true
          title: Staff status
          description: Designates whether the user can log into this admin site.
        is_superuser:
          type: boolean
          readOnly: true
          title: Superuser status
          description:
            Designates that this user has all permissions without explicitly
            assigning them.
      required:
        - id
        - is_staff
        - is_superuser
        - username
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
        - email
        - pk
        - username
    VerifyEmail:
      type: object
      properties:
        key:
          type: string
      required:
        - key
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
