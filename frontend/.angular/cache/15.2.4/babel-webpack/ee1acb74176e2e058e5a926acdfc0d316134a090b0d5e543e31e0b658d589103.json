{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nexport class AuthInterceptor {\n  constructor(cookieService) {\n    this.cookieService = cookieService;\n  }\n  intercept(request, next) {\n    const authToken = this.cookieService.get('auth_token');\n    if (authToken) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Token ${authToken}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.CookieService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAWA,OAAM,MAAOA,eAAe;EAC1BC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;EAAkB;EAEnDC,SAAS,CACPC,OAAyB,EACzBC,IAAiB;IAEjB,MAAMC,SAAS,GAAG,IAAI,CAACJ,aAAa,CAACK,GAAG,CAAC,YAAY,CAAC;IACtD,IAAID,SAAS,EAAE;MACbF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,SAASJ,SAAS;;OAEpC,CAAC;;IAEJ,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC;EAC7B;;AAhBWJ,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAY,SAAfZ,eAAe;AAAA","names":["AuthInterceptor","constructor","cookieService","intercept","request","next","authToken","get","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["/home/cdot/dev/public/prisma-panorama-diffsync/frontend/src/app/auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\nimport { CookieService } from 'ngx-cookie-service';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private cookieService: CookieService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const authToken = this.cookieService.get('auth_token');\n    if (authToken) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Token ${authToken}`,\n        },\n      });\n    }\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}