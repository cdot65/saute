{"ast":null,"code":"import _asyncToGenerator from \"/home/cdot/dev/public/prisma-panorama-diffsync/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// frontend/src/app/auth.service.ts\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n    this.tokenUrl = environment.tokenUrl;\n  }\n  getToken() {\n    return localStorage.getItem('auth_token');\n  }\n  setToken(token) {\n    localStorage.setItem('auth_token', token);\n  }\n  removeToken() {\n    localStorage.removeItem('auth_token');\n  }\n  login(username, password) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const url = `${_this.apiUrl}/dj-rest-auth/login/`;\n      try {\n        const response = yield _this.http.post(url, {\n          username,\n          password\n        }).toPromise();\n        _this.setToken(response.key);\n        return true;\n      } catch (error) {\n        console.error('Login failed:', error);\n        return false;\n      }\n    })();\n  }\n  logout() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const url = `${_this2.apiUrl}/dj-rest-auth/logout/`;\n      try {\n        const token = _this2.getToken();\n        if (!token) {\n          throw new Error('No token found');\n        }\n        const headers = new HttpHeaders({\n          'Authorization': `Token ${token}`\n        });\n        yield _this2.http.post(url, {}, {\n          headers\n        }).toPromise();\n        _this2.removeToken();\n      } catch (error) {\n        console.error('Logout failed:', error);\n      }\n    })();\n  }\n  getAuthHeaders() {\n    const token = this.getToken();\n    if (token) {\n      return new HttpHeaders({\n        'Authorization': `Token ${token}`\n      });\n    } else {\n      return new HttpHeaders();\n    }\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAAA;AAEA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,WAAW,QAAQ,6BAA6B;;;AAKzD,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,WAAM,GAAGH,WAAW,CAACI,MAAM;IAC3B,aAAQ,GAAGJ,WAAW,CAACK,QAAQ;EAEA;EAE/BC,QAAQ;IACd,OAAOC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAC3C;EAEQC,QAAQ,CAACC,KAAa;IAC5BH,YAAY,CAACI,OAAO,CAAC,YAAY,EAAED,KAAK,CAAC;EAC3C;EAEQE,WAAW;IACjBL,YAAY,CAACM,UAAU,CAAC,YAAY,CAAC;EACvC;EAEMC,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IAAA;IAAA;MAC5C,MAAMC,GAAG,GAAG,GAAG,KAAI,CAACb,MAAM,sBAAsB;MAChD,IAAI;QACF,MAAMc,QAAQ,SAAc,KAAI,CAACf,IAAI,CAACgB,IAAI,CAACF,GAAG,EAAE;UAAEF,QAAQ;UAAEC;QAAQ,CAAE,CAAC,CAACI,SAAS,EAAE;QACnF,KAAI,CAACX,QAAQ,CAACS,QAAQ,CAACG,GAAG,CAAC;QAC3B,OAAO,IAAI;OACZ,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;QACrC,OAAO,KAAK;;IACb;EACH;EAEME,MAAM;IAAA;IAAA;MACV,MAAMP,GAAG,GAAG,GAAG,MAAI,CAACb,MAAM,uBAAuB;MACjD,IAAI;QACF,MAAMM,KAAK,GAAG,MAAI,CAACJ,QAAQ,EAAE;QAC7B,IAAI,CAACI,KAAK,EAAE;UACV,MAAM,IAAIe,KAAK,CAAC,gBAAgB,CAAC;;QAEnC,MAAMC,OAAO,GAAG,IAAI3B,WAAW,CAAC;UAAE,eAAe,EAAE,SAASW,KAAK;QAAE,CAAE,CAAC;QACtE,MAAM,MAAI,CAACP,IAAI,CAACgB,IAAI,CAACF,GAAG,EAAE,EAAE,EAAE;UAAES;QAAO,CAAE,CAAC,CAACN,SAAS,EAAE;QACtD,MAAI,CAACR,WAAW,EAAE;OACnB,CAAC,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;;IACvC;EACH;EAEAK,cAAc;IACZ,MAAMjB,KAAK,GAAG,IAAI,CAACJ,QAAQ,EAAE;IAC7B,IAAII,KAAK,EAAE;MACT,OAAO,IAAIX,WAAW,CAAC;QAAE,eAAe,EAAE,SAASW,KAAK;MAAE,CAAE,CAAC;KAC9D,MAAM;MACL,OAAO,IAAIX,WAAW,EAAE;;EAE5B;;AApDWE,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA2B,SAAX3B,WAAW;EAAA4B,YAFV;AAAM","names":["HttpHeaders","environment","AuthService","constructor","http","apiUrl","tokenUrl","getToken","localStorage","getItem","setToken","token","setItem","removeToken","removeItem","login","username","password","url","response","post","toPromise","key","error","console","logout","Error","headers","getAuthHeaders","factory","providedIn"],"sourceRoot":"","sources":["/home/cdot/dev/public/prisma-panorama-diffsync/frontend/src/app/auth.service.ts"],"sourcesContent":["// frontend/src/app/auth.service.ts\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from '../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiUrl = environment.apiUrl;\n  private tokenUrl = environment.tokenUrl;\n  \n  constructor(private http: HttpClient) {}\n\n  private getToken(): string | null {\n    return localStorage.getItem('auth_token');\n  }\n\n  private setToken(token: string): void {\n    localStorage.setItem('auth_token', token);\n  }\n\n  private removeToken(): void {\n    localStorage.removeItem('auth_token');\n  }\n\n  async login(username: string, password: string): Promise<boolean> {\n    const url = `${this.apiUrl}/dj-rest-auth/login/`;\n    try {\n      const response: any = await this.http.post(url, { username, password }).toPromise();\n      this.setToken(response.key);\n      return true;\n    } catch (error) {\n      console.error('Login failed:', error);\n      return false;\n    }\n  }\n\n  async logout(): Promise<void> {\n    const url = `${this.apiUrl}/dj-rest-auth/logout/`;\n    try {\n      const token = this.getToken();\n      if (!token) {\n        throw new Error('No token found');\n      }\n      const headers = new HttpHeaders({ 'Authorization': `Token ${token}` });\n      await this.http.post(url, {}, { headers }).toPromise();\n      this.removeToken();\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  }\n\n  getAuthHeaders(): HttpHeaders {\n    const token = this.getToken();\n    if (token) {\n      return new HttpHeaders({ 'Authorization': `Token ${token}` });\n    } else {\n      return new HttpHeaders();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}